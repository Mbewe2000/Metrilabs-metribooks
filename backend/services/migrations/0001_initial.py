# Generated by Django 5.2.4 on 2025-07-23 01:30

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Service Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Haircut, Cleaning, Delivery, Tailoring', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of the service')),
                ('pricing_type', models.CharField(choices=[('hourly', 'Hourly Rate'), ('fixed', 'Fixed Price'), ('both', 'Both (Hourly & Fixed)')], default='hourly', help_text='How this service is priced', max_length=10)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Rate per hour in ZMW', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('fixed_price', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed price for the service in ZMW', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='e.g., Labor, Consultancy, Repairs', null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.servicecategory')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('employee_id', models.CharField(blank=True, help_text='Optional employee ID', max_length=50)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_owner', models.BooleanField(default=False, help_text='Is this the business owner?')),
                ('is_active', models.BooleanField(default=True)),
                ('hired_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('services', models.ManyToManyField(blank=True, help_text='Services this worker can perform', to='services.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_owner', 'name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ServiceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_performed', models.DateField(default=django.utils.timezone.now)),
                ('start_time', models.TimeField(blank=True, help_text='Start time (for hourly services)', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='End time (for hourly services)', null=True)),
                ('hours_worked', models.DecimalField(blank=True, decimal_places=2, help_text='Total hours worked (can be manually entered or auto-calculated)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('used_fixed_price', models.BooleanField(default=False, help_text='Was fixed pricing used?')),
                ('hourly_rate_used', models.DecimalField(blank=True, decimal_places=2, help_text="Hourly rate used for this record (may differ from service's current rate)", max_digits=10, null=True)),
                ('fixed_price_used', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed price used for this record', max_digits=10, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount for this work', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('customer_name', models.CharField(blank=True, help_text='Customer who received the service', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the work performed')),
                ('reference_number', models.CharField(blank=True, help_text='Reference number or invoice ID', max_length=100)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_records', to='services.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_records', to=settings.AUTH_USER_MODEL)),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_records', to='services.worker')),
            ],
            options={
                'ordering': ['-date_performed', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkerPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField()),
                ('month', models.PositiveIntegerField()),
                ('total_hours_worked', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8)),
                ('total_services_performed', models.PositiveIntegerField(default=0)),
                ('total_revenue_generated', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('average_hourly_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('services_breakdown', models.JSONField(default=dict, help_text='Breakdown of services performed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.worker')),
            ],
            options={
                'ordering': ['-year', '-month', 'worker__name'],
                'unique_together': {('user', 'worker', 'year', 'month')},
            },
        ),
    ]
