# Generated by Django 5.2.4 on 2025-07-23 00:41

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('food_beverage', 'Food & Beverage'), ('electronics', 'Electronics'), ('clothing_accessories', 'Clothing & Accessories'), ('health_beauty', 'Health & Beauty'), ('home_garden', 'Home & Garden'), ('books_stationery', 'Books & Stationery'), ('sports_outdoor', 'Sports & Outdoor'), ('automotive', 'Automotive'), ('toys_games', 'Toys & Games'), ('other', 'Other')], help_text='Product category', max_length=30, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether category is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product name', max_length=255)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit or Product Code', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='Product description', null=True)),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Selling price in ZMW', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price in ZMW (optional)', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('unit_of_measure', models.CharField(choices=[('each', 'Each'), ('kg', 'Kilogram'), ('g', 'Gram'), ('liter', 'Liter'), ('ml', 'Milliliter'), ('meter', 'Meter'), ('cm', 'Centimeter'), ('pack', 'Pack'), ('box', 'Box'), ('dozen', 'Dozen'), ('pair', 'Pair'), ('set', 'Set'), ('bottle', 'Bottle'), ('can', 'Can'), ('bag', 'Bag')], default='each', help_text='Unit of measurement', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether product is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='Product owner', on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='Product category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='inventory.productcategory')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
                'unique_together': {('user', 'sku')},
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_in_stock', models.DecimalField(decimal_places=3, default=0, help_text='Current quantity in stock', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))])),
                ('reorder_level', models.DecimalField(blank=True, decimal_places=3, help_text='Minimum stock level before reorder alert', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))])),
                ('opening_stock', models.DecimalField(decimal_places=3, default=0, help_text='Initial stock quantity', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.000'))])),
                ('last_stock_update', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.OneToOneField(help_text='Related product', on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='inventory.product')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventories',
            },
        ),
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock')], help_text='Type of alert', max_length=20)),
                ('current_stock', models.DecimalField(decimal_places=3, help_text='Stock level when alert was created', max_digits=12)),
                ('reorder_level', models.DecimalField(blank=True, decimal_places=3, help_text='Reorder level at time of alert', max_digits=12, null=True)),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether alert is resolved')),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(help_text='Product with alert', on_delete=django.db.models.deletion.CASCADE, related_name='stock_alerts', to='inventory.product')),
            ],
            options={
                'verbose_name': 'Stock Alert',
                'verbose_name_plural': 'Stock Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('opening_stock', 'Opening Stock'), ('stock_in', 'Stock In (Manual)'), ('stock_out', 'Stock Out (Manual)'), ('sale', 'Sale (Auto)'), ('return', 'Return'), ('adjustment', 'Stock Adjustment'), ('damage', 'Damaged/Expired'), ('theft', 'Theft/Loss')], help_text='Type of stock movement', max_length=20)),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Quantity moved (positive for in, negative for out)', max_digits=12)),
                ('quantity_before', models.DecimalField(decimal_places=3, help_text='Stock quantity before this movement', max_digits=12)),
                ('quantity_after', models.DecimalField(decimal_places=3, help_text='Stock quantity after this movement', max_digits=12)),
                ('reference_number', models.CharField(blank=True, help_text='Reference number (e.g., invoice, receipt)', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the movement', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(help_text='User who performed the movement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_movements', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(help_text='Related product', on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='inventory.product')),
            ],
            options={
                'verbose_name': 'Stock Movement',
                'verbose_name_plural': 'Stock Movements',
                'ordering': ['-created_at'],
            },
        ),
    ]
