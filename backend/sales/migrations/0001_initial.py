# Generated by Django 5.2.4 on 2025-07-23 02:34

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sale_number', models.CharField(help_text='Auto-generated sale number', max_length=50, unique=True)),
                ('sale_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of sale')),
                ('customer_name', models.CharField(blank=True, help_text='Customer name (optional)', max_length=200)),
                ('customer_phone', models.CharField(blank=True, help_text='Customer phone (optional)', max_length=20)),
                ('customer_email', models.EmailField(blank=True, help_text='Customer email (optional)', max_length=254)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Total before discount and tax', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount applied', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Final total amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('mobile_money', 'Mobile Money'), ('bank_transfer', 'Bank Transfer'), ('card', 'Card Payment'), ('credit', 'Credit/Account'), ('other', 'Other')], default='cash', help_text='Payment method used', max_length=20)),
                ('payment_reference', models.CharField(blank=True, help_text='Payment reference number (e.g., mobile money transaction ID)', max_length=100)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount actually paid', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('change_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Change given to customer', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('pending', 'Pending'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='completed', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the sale')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sale_date'],
                'unique_together': {('user', 'sale_number')},
            },
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service')], max_length=10)),
                ('item_name', models.CharField(help_text='Name of item at time of sale', max_length=200)),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Quantity sold', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of sale', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount applied to this item', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this line item', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('notes', models.TextField(blank=True, help_text='Notes about this item')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(blank=True, help_text='Product sold (if item_type=product)', null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='sales.sale')),
                ('service', models.ForeignKey(blank=True, help_text='Service sold (if item_type=service)', null=True, on_delete=django.db.models.deletion.CASCADE, to='services.service')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SalesReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], max_length=10)),
                ('period_start', models.DateField(help_text='Start date of reporting period')),
                ('period_end', models.DateField(help_text='End date of reporting period')),
                ('total_sales', models.IntegerField(default=0, help_text='Number of sales')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total revenue', max_digits=12)),
                ('total_discounts', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discounts given', max_digits=12)),
                ('total_tax', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax collected', max_digits=12)),
                ('payment_method_breakdown', models.JSONField(default=dict, help_text='Breakdown of sales by payment method')),
                ('top_products', models.JSONField(default=list, help_text='Top selling products for the period')),
                ('top_services', models.JSONField(default=list, help_text='Top selling services for the period')),
                ('generated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-period_end'],
                'unique_together': {('user', 'report_type', 'period_start', 'period_end')},
            },
        ),
    ]
